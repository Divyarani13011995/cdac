// Heap sort 3 code

import java.io.*;
import java.util.*;

public class Solution {
    
    public static void heapify(int arr[],int n,int i){
        int largest=i;
        int l=2*i+1;
        int r=2*i+2;
        
        if((l<n && arr[l]>arr[largest]))
            largest=l;
        if(r<n && arr[r] > arr[largest])
            largest=r;
        
        if(largest != i){
            int temp=arr[i];
            arr[i]=arr[largest];
            arr[largest]=temp;
            
            heapify(arr,n,i);
        }
        
     static void hSort(int arr[]){
            int n=arr.length;
            for(int i=n/2-1;i>=0;i--){
                heapify(arr,n,i);
            }
            for(int i=n-1;i>0;i--){
                int temp=arr[0];
                arr[0]=arr[i];
                arr[i]=temp;
                //heapify(arr,i,0);
                
            }
            heapify(arr,i,0);
        }
        
    }
    public static void display(int arr[]){
        for(int i=0;i<arr.length-1;i++){
            System.out.println(arr[i]+" ");
        }
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        int arr[]={12,11,13,5,6};
       hsort(arr);
        display(arr);
    }
}

//Linked list code 

import java.io.*;
import java.util.*;

public class Solution {
        Node head;
    static class Node
    {
        int data;
        Node next;
        public Node(int d){
            data=d;
            next=null;
        }
    }
    
    public void insert(int data){
        Node node = new Node(data);
       node.next=head;
        //if(head == null){
           // node.next=null;
            head=node;
        
        
    }
    
    void display(){
        Node n=head;
        while(n != null){
            System.out.print(n.data+" ");
            n=n.next;
        }
    
    }
    
    public void middle(){
        Node n1=head;
        Node n2=head;
        while(n2 != null && n2.next != null){
            n1=n1.next;
            n2=n2.next.next;
            System.out.print(n2);
        }
        
    }
    
    public String isPresent(int key){
        Node temp=head;
        
        while(temp != null){
            if(temp.data == key)
              return "Found";
             temp=temp.next;
        }
            
                return "NotFound";
    }

    
    

    public static void main(String[] args) {
        Solution s=new Solution();
        s.insert(5);
        s.insert(4);
        s.insert(3);
        s.insert(2);
        s.insert(1);
        s.display();
        s.isPresent(3);
        s.middle();
        
        
    }
}
